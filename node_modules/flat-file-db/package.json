{
  "name": "flat-file-db",
  "version": "0.1.3",
  "repository": {
    "type": "git",
    "url": "git://github.com:mafintosh/flat-file-db.git"
  },
  "author": {
    "name": "Mathias Buus",
    "email": "mathiasbuus@gmail.com"
  },
  "description": "Fast in-process flat file database that caches all data in memory",
  "dependencies": {
    "mkdirp": "~0.3.5"
  },
  "devDependencies": {
    "tap": "~0.4.6"
  },
  "scripts": {
    "test": "tap test.js"
  },
  "keywords": [
    "db",
    "flat",
    "file",
    "memory",
    "in",
    "process",
    "json",
    "files",
    "compact",
    "consistent",
    "fast"
  ],
  "readme": "# flat-file-db\n\nFast in-process flat file database for Node.js that supports JSON and caches all data in memory.\nAll data is persisted to an open file using a append-only algorithm ensuring compact file sizes and strong consistency.\n\n\tnpm install flat-file-db\n\n[![build status](https://secure.travis-ci.org/mafintosh/flat-file-db.png)](http://travis-ci.org/mafintosh/flat-file-db)\n\n## Usage\n\nPass a database file to use to the flat-file-db constructor and wait for the database to open.\nWhen it is open all data has been loaded into memory.\n\n``` js\nvar flatfile = require('flat-file-db');\nvar db = flatfile('/tmp/my.db');\n\ndb.on('open', function() {\n\tdb.put('hello', {world:1});  // store some data\n\tconsole.log(db.get('hello')) // prints {world:1}\n\n\tdb.put('hey', {world:2}, function() {\n\t\t// 'hey' is now fully persisted\n\t});\n});\n```\n\nIf you don't want to wait for it to open use `flatfile.sync`\n\n``` js\nvar db = flatfile.sync('/tmp/my.db');\nconsole.log(db.get('hello')); // prints {world:1}\n```\n\nIf you issue multiple writes the last one will always win\n\n``` js\nfor (var i = 0; i < 10; i++) {\n\tdb.put('test', {count:i}, ...);\n}\nconsole.log(db.get('test')); // {count:9} which also the persisted value of 'test'\n```\n\n## API\n\n* `db = flatfile(path, opts)` Create a new db instance. Per default fsync is called on all puts. To disable this set `opts.fsync = false`\n\n* `db = flatfile.sync(path, opts)` Same as above except you do not need to wait for the open event\n\n* `db.put(key, val, [cb])` Insert or update new key\n\n* `db.del(key, [cb])` Delete a key\n\n* `db.get(key) -> doc` Get the value of a key\n\n* `db.has(key) -> bool` True if db has key\n\n* `db.keys() -> list` Get all keys as an array\n\n* `db.close()` Close the database\n\n## Events\n\n* `db.on('open')` Fired when the db is open and ready for use.\n\n* `db.on('close')` Fired when the db is fully closed\n\n* `db.on('drain')` All puts and deletes are flushed to disk\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mafintosh/flat-file-db/issues"
  },
  "homepage": "https://github.com/mafintosh/flat-file-db",
  "_id": "flat-file-db@0.1.3",
  "dist": {
    "shasum": "68a6cd7ad6cd2a2d0333ca3794e8c26cf764abc5"
  },
  "_from": "flat-file-db@",
  "_resolved": "https://registry.npmjs.org/flat-file-db/-/flat-file-db-0.1.3.tgz"
}
